datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Schema start

enum UserAppRole {
  BASIC_USER
  MODERATOR
  ADMIN
  SUPER_ADMIN
}

enum UserProfileRole {
  PROFILE_MANAGER
  PROFILE_ADMIN
  PROFILE_OWNER
}

enum ProfileType {
  ORGANIZATION
  INDIVIDUAL
}

enum PetGender {
  MALE
  FEMALE
  UNKNOWN
  HERMAPHRODITE
  ASEXUAL
  NONE
}

enum FurType {
  SHORT
  MEDIUM
  LONG
  HAIRLESS
  NONE
}

enum HealthStatus {
  HEALTHY
  UNDER_TREATMENT
  RECOVERING
  CHRONIC_CONDITION
  UNKNOWN
}

enum PetType {
  CAT
  DOG
}

enum PetStatus {
  ACTIVE
  ARCHIVED
  SUSPENDED
}

enum ProfileStatus {
  ACTIVE
  ARCHIVED
  SUSPENDED
}

enum WishStatus {
  ACTIVE
  ARCHIVED
  SUSPENDED
}

model User {
  id            String        @id @default(cuid())
  name          String?
  nickName      String?
  email         String        @unique
  emailVerified DateTime?
  image         String
  role          UserAppRole   @default(BASIC_USER)
  profileRoles  ProfileRole[]
  sessions      Session[]
  accounts      Account[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  archivedat    DateTime?
}

model Profile {
  id              String        @id @default(cuid())
  name            String
  nickName        String        @unique
  description     String
  phone           String
  address         String
  website         String?
  owner           String
  type            ProfileType
  status          ProfileStatus @default(ACTIVE)
  pets            Pet[]
  roles           ProfileRole[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  archivedAt      DateTime?
  archivedReason  String?
  suspendedAt     DateTime?
  suspendedReason String?

  wishes Wish[]
}

model ProfileRole {
  id        String          @id @default(cuid())
  userId    String
  profileId String
  role      UserProfileRole
  user      User            @relation(fields: [userId], references: [id])
  profile   Profile         @relation(fields: [profileId], references: [id])
}

model Pet {
  id                 String      @id @default(cuid())
  name               String
  nickName           String      @unique
  birthDate          DateTime
  type               PetType
  gender             PetGender
  furType            FurType
  isReadyForAdoption Boolean     @default(true)
  isFeatured         Boolean     @default(false)
  isAdopted          Boolean     @default(false)
  isPublished        Boolean     @default(false)
  status             PetStatus   @default(ACTIVE)
  profileId          String
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  archivedAt         DateTime?
  archivedReason     String?
  suspendedAt        DateTime?
  suspendedReason    String?
  profile            Profile     @relation(fields: [profileId], references: [id])
  petProfile         PetProfile?
  colors             PetColor[]
  photos             PetImage[]

  @@index([nickName])
  @@index([status])
  @@index([profileId, createdAt])
  @@index([type, createdAt])
}

model PetProfile {
  petId                      String       @unique
  isSocialized               Boolean      @default(true)
  isFriendlyWithCats         Boolean      @default(false)
  isFriendlyWithDogs         Boolean      @default(false)
  isFriendlyWithOtherAnimals Boolean      @default(false)
  isLitterBoxTrained         Boolean?
  isUsesScratchingPost       Boolean?
  isSterilized               Boolean      @default(true)
  isVaccinated               Boolean      @default(true)
  isTreatedForParasites      Boolean      @default(true)
  healthStatus               HealthStatus @default(UNKNOWN)
  biography                  String       @default("")
  createdAt                  DateTime     @default(now())
  updatedAt                  DateTime     @updatedAt
  pet                        Pet          @relation(fields: [petId], references: [id], onDelete: Cascade)

  @@index([petId])
}

model PetColor {
  petId   String
  colorId String
  color   Color  @relation(fields: [colorId], references: [id], onDelete: Cascade)
  pet     Pet    @relation(fields: [petId], references: [id], onDelete: Cascade)

  @@unique([petId, colorId])
}

model Color {
  id   String     @id @default(cuid())
  name String     @unique
  pets PetColor[]
}

model PetImage {
  id        String   @id @default(cuid())
  petId     String
  s3Key     String   @unique
  src       String   @unique
  width     Int
  height    Int
  altText   String?
  isAvatar  Boolean  @default(false)
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  pet       Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)

  @@index([petId, isAvatar])
}

model Wish {
  id              String      @id @default(cuid())
  name            String
  description     String
  links           String[]
  images          WishImage[]
  profileId       String
  status          WishStatus  @default(ACTIVE)
  completedAt     DateTime?
  archivedAt      DateTime?
  suspendedAt     DateTime?
  suspendedReason String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  profile         Profile     @relation(fields: [profileId], references: [id])

  @@index([profileId])
}

model WishImage {
  id        String   @id @default(cuid())
  wishId    String
  s3Key     String
  src       String
  width     Int
  height    Int
  altText   String?
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  wish      Wish     @relation(fields: [wishId], references: [id], onDelete: Cascade)
}

model Log {
  id        String   @id @default(cuid())
  userId    String?
  profileId String?
  petId     String?
  action    String
  metadata  Json?
  createdAt DateTime @default(now())
}
